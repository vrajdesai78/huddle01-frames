import { ImageResponse } from 'next/og';

export const runtime = 'edge';

interface previewPeersMetadata {
  roomId: string;
  previewPeers: {
    displayName: string;
  }[];
}

export const dynamic = 'force-dynamic';

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const roomId = searchParams.get('roomId');

  if (!roomId) {
    return new Response('Missing roomId', { status: 400 });
  }

  const peersMetadata = await fetch(
    `https://api.huddle01.com/api/v1/live-meeting/preview-peers?roomId=${roomId}`,
    {
      headers: {
        'x-api-key': process.env.API_KEY!,
      },
    }
  );

  const peers = (await peersMetadata.json()) as previewPeersMetadata;

  console.log('called', peers, roomId);
  const { previewPeers } = peers;

  try {
    return new ImageResponse(
      (
        <div
          style={{
            margin: 0,
            padding: 0,
            height: '100vh',
            width: '100%',
            display: 'flex',
            flexDirection: 'column',
            backgroundColor: '#181A23',
          }}
        >
          <div
            style={{
              backgroundColor: '#23262F',
              padding: '1rem',
              display: 'flex',
              alignItems: 'center',
              width: '100%',
              paddingLeft: '1.75rem',
            }}
          >
            <svg
              width='180'
              height='50'
              viewBox='0 0 93 20'
              fill='none'
              xmlns='http://www.w3.org/2000/svg'
            >
              <path
                d='M-0.000167847 0.31192C0.99771 0.470541 1.99674 0.620541 2.99693 0.76192V8.17571C4.06979 8.20789 5.14323 8.23893 6.21724 8.26881C6.21724 5.9079 6.21724 3.5464 6.21724 1.18433C7.21743 1.30847 8.21934 1.42341 9.22299 1.52916C9.22299 7.10962 9.22299 12.6918 9.22299 18.2757C8.2205 18.3688 7.21858 18.4711 6.21724 18.5826V10.7602C5.14207 10.7671 4.06863 10.7751 2.99693 10.7843V18.9861C1.99674 19.1194 0.99771 19.2636 -0.000167847 19.4188V0.31192Z'
                fill='white'
              />
              <path
                d='M15.3 18.045C13.8378 18.1381 12.7251 17.8846 11.9585 17.2415C11.1919 16.5984 10.8078 15.5794 10.8078 14.2467C10.8078 10.0662 10.8078 5.88577 10.8078 1.70531C11.8114 1.80531 12.8162 1.89726 13.8222 1.98117C13.8222 6.09381 13.8222 10.2065 13.8222 14.3191C13.8222 14.8662 13.9502 15.2553 14.2063 15.4863C14.4797 15.7162 14.8633 15.8197 15.3571 15.7967C15.852 15.776 16.2223 15.6415 16.4818 15.395C16.7414 15.1484 16.8937 14.7588 16.8937 14.2277C16.8937 10.2231 16.8937 6.21853 16.8937 2.21393C17.8627 2.28117 18.8335 2.33807 19.8025 2.38634C19.8025 6.25186 19.8025 10.118 19.8025 13.9846C19.8025 15.2157 19.4184 16.1708 18.6483 16.8743C17.8783 17.5777 16.7639 17.9536 15.3 18.045Z'
                fill='white'
              />
              <path
                d='M21.4054 2.4673C22.942 2.53397 24.4797 2.58282 26.0187 2.61385C27.5207 2.64489 28.6489 2.95868 29.3999 3.57937C30.1509 4.20006 30.5264 5.10178 30.5264 6.29489C30.5264 8.78109 30.5264 11.2667 30.5264 13.7518C30.5264 14.9449 30.1503 15.8501 29.3982 16.4673C28.6472 17.0863 27.5207 17.4001 26.0187 17.4225C24.4797 17.4455 22.9408 17.4828 21.4019 17.5345C21.4042 12.5116 21.4054 7.48914 21.4054 2.4673ZM25.9564 15.307C26.4513 15.307 26.8268 15.192 27.0829 14.9621C27.358 14.7345 27.4947 14.369 27.4964 13.8621C27.4964 11.3035 27.4964 8.74431 27.4964 6.18454C27.4964 5.67764 27.358 5.3104 27.0846 5.08282C26.8112 4.85523 26.4513 4.73799 25.9581 4.73799L24.418 4.7104V15.3259L25.9564 15.307Z'
                fill='white'
              />
              <path
                d='M32.0125 2.63977C33.5503 2.62253 35.0887 2.5869 36.6276 2.53288C38.1296 2.4777 39.2544 2.73632 40.0054 3.33805C40.7564 3.93977 41.1302 4.86563 41.1302 6.10701C41.1302 8.69092 41.1302 11.2771 41.1302 13.8656C41.1302 15.1093 40.7552 16.0375 40.0054 16.6501C39.2561 17.2622 38.1296 17.5329 36.6276 17.4915C35.0898 17.4501 33.5509 17.4231 32.0108 17.4105L32.0125 2.63977ZM36.5774 15.3449C37.0723 15.3541 37.4478 15.2467 37.7039 15.0225C37.9785 14.7926 38.1158 14.4225 38.1158 13.9122C38.1158 11.3018 38.1158 8.69207 38.1158 6.08287C38.1158 5.56793 37.9785 5.19954 37.7039 4.9777C37.4478 4.75529 37.0723 4.65356 36.5791 4.66563L35.0408 4.70184V15.3243C35.553 15.3311 36.0652 15.3449 36.5774 15.3449Z'
                fill='white'
              />
              <path
                d='M42.622 2.22576C43.628 2.15794 44.6334 2.08265 45.6382 1.99989C45.6382 6.54357 45.6382 11.0867 45.6382 15.6292C47.2913 15.7051 48.9427 15.7964 50.5924 15.9033V18.2999C47.9396 18.0499 45.2834 17.862 42.622 17.7206C42.6232 12.5551 42.6232 7.39012 42.622 2.22576Z'
                fill='white'
              />
              <path
                d='M51.49 1.42414C54.224 1.1138 56.9529 0.743107 59.6766 0.312073V3.04138C57.9462 3.23678 56.2192 3.4161 54.4957 3.57931V8.24483L58.6141 8.12414V10.8069C57.2436 10.7885 55.8708 10.7753 54.4957 10.7672V16.1897C56.2261 16.3333 57.9531 16.5 59.6766 16.6897V19.419C56.9529 18.9948 54.2258 18.6569 51.4917 18.3845C51.4917 12.7305 51.4911 7.07701 51.49 1.42414Z'
                fill='white'
              />
              <path
                d='M79.3126 -3.05176e-05H66.8535C65.8439 -3.05176e-05 64.8756 0.399599 64.1616 1.11094C63.4477 1.82229 63.0466 2.78708 63.0466 3.79307V16.2069C63.0466 17.2129 63.4477 18.1777 64.1616 18.889C64.8756 19.6003 65.8439 20 66.8535 20H79.3126C80.3223 20 81.2906 19.6003 82.0045 18.889C82.7184 18.1777 83.1195 17.2129 83.1195 16.2069V3.79307C83.1195 2.78708 82.7184 1.82229 82.0045 1.11094C81.2906 0.399599 80.3223 -3.05176e-05 79.3126 -3.05176e-05V-3.05176e-05Z'
                fill='#246BFD'
              />
              <path
                d='M90.0279 3.57572C89.8529 3.61311 89.6867 3.68333 89.5382 3.78262L86.5705 5.58262C86.1054 5.86717 85.7235 6.2685 85.463 6.74641C85.1956 7.23448 85.0558 7.78174 85.0564 8.33779V11.6688C85.0561 12.2261 85.1965 12.7746 85.4647 13.2637C85.7264 13.7428 86.1102 14.1449 86.5774 14.4292L89.5676 16.2292C89.7612 16.3484 89.9774 16.4264 90.2026 16.4585C90.4267 16.4896 90.6548 16.4738 90.8723 16.4119C91.0921 16.3487 91.2969 16.2419 91.4745 16.0981C91.6545 15.9508 91.8038 15.7699 91.914 15.5654C92.0643 15.2853 92.1427 14.9726 92.1424 14.655V5.32745C92.1419 5.05717 92.0828 4.79019 91.9694 4.54469C91.8572 4.30336 91.6929 4.08967 91.4883 3.91883C91.2878 3.75168 91.0507 3.63359 90.7962 3.574C90.5436 3.51364 90.2802 3.51423 90.0279 3.57572Z'
                fill='#246BFD'
              />
              <path
                d='M70.3431 16.474C69.4133 16.474 68.7021 16.2045 68.2095 15.6654C67.7169 15.1263 67.4706 14.3654 67.4706 13.3826V6.91712C67.4706 5.93207 67.7169 5.17057 68.2095 4.63264C68.7021 4.09471 69.4133 3.82517 70.3431 3.82402C71.266 3.82402 71.9766 4.09356 72.475 4.63264C72.9734 5.17172 73.2196 5.93322 73.2139 6.91712V13.3826C73.2139 14.3654 72.9676 15.1263 72.475 15.6654C71.9824 16.2045 71.2718 16.474 70.3431 16.474ZM70.3431 14.7171C70.9949 14.7171 71.3214 14.3148 71.3225 13.5102V6.79299C71.3225 5.98839 70.9961 5.58609 70.3431 5.58609C69.6902 5.58609 69.3631 5.98839 69.362 6.79299V13.5051C69.362 14.3142 69.689 14.7183 70.3431 14.7171Z'
                fill='white'
              />
              <path
                d='M76.7993 6.91704H74.8214V5.54635C75.2556 5.55884 75.6895 5.51126 76.1106 5.40497C76.4148 5.33162 76.6916 5.17308 76.9083 4.94808C77.1374 4.66586 77.3133 4.34457 77.4274 3.9998H78.6993V16.2981H76.7993V6.91704Z'
                fill='white'
              />
            </svg>
          </div>
          {previewPeers?.length > 0 ? (
            <div
              style={{
                display: 'flex',
                alignItems: 'center',
                gap: '1rem',
                width: '100%',
                height: '80%',
                margin: '1.5rem',
              }}
            >
              <div
                style={{
                  color: 'white',
                  width: '48%',
                  height: '100%',
                  padding: '1.5rem',
                  display: 'flex',
                  justifyContent: 'center',
                  flexDirection: 'column',
                }}
              >
                <div
                  style={{
                    display: 'flex',
                    flexDirection: 'column',
                    gap: '1rem',
                  }}
                >
                  {previewPeers.slice(0, 4).map((peer) => (
                    <div
                      key={peer.displayName}
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.5rem',
                      }}
                    >
                      <div
                        style={{
                          backgroundColor: '#3C3F58',
                          borderRadius: '50%',
                          width: '4rem',
                          height: '4rem',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: '2rem',
                        }}
                      >
                        {peer.displayName[0].toUpperCase()}
                      </div>
                      <span
                        style={{
                          fontSize: '2rem',
                        }}
                      >
                        {peer.displayName}
                      </span>
                    </div>
                  ))}
                  {previewPeers.length > 4 && (
                    <div
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.5rem',
                      }}
                    >
                      <div
                        style={{
                          backgroundColor: '#3C3F58',
                          borderRadius: '50%',
                          width: '4rem',
                          height: '4rem',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: '2rem',
                        }}
                      >
                        <svg
                          xmlns='http://www.w3.org/2000/svg'
                          fill='none'
                          viewBox='0 0 24 24'
                          stroke-width='1.5'
                          stroke='currentColor'
                          width='2.5rem'
                          height='2.5rem'
                        >
                          <path
                            stroke-linecap='round'
                            stroke-linejoin='round'
                            d='M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z'
                          />
                        </svg>
                      </div>
                      <span
                        style={{
                          fontSize: '2rem',
                        }}
                      >
                        {previewPeers.length - 4}+ Participants
                      </span>
                    </div>
                  )}
                </div>
              </div>
              <div
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyItems: 'center',
                  fontSize: '2rem',
                  fontWeight: '600',
                  width: '48%',
                  color: 'white',
                  fontFamily: 'Inter',
                }}
              >
                <span>Join this Huddle01 call to participate in the talk</span>
              </div>
            </div>
          ) : (
            <div
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                width: '100%',
                height: '100%',
                color: 'white',
                fontSize: '4rem',
              }}
            >
              No one is in the call yet
            </div>
          )}
        </div>
      ),
      {
        width: 1200,
        height: 630,
      }
    );
  } catch (e: any) {
    console.log(e);
    return new Response(e, { status: 500 });
  }
}
